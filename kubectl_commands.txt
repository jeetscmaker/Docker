Kubectl basic commands
========================
1. kubectl get nodes
2. kubectl get pod
3. kubectl get services
4. kubectl create -h (this is a help command for create)
	For creating a deployment:
	kubectl create deployment NAME --image=image_name [--dry-run] [options]
	example:
	kubectl create deployment nginx-depl --image=nginx
5. kubectl get deployment
	Between deployment and pod, there is another layer which is called replica.
6. kubectl get replicaset (A replicaset is managing the replica of a pod).
	We don't have to create, delete or update a replicaset. It's taken care of by Kubernetes.
	We just manage the deployment. And everything below the deployment is managed by kubernetes.
	A deployment manages.
7. kubectl edit deployment NAME_OF_DEPLOYMENT

kubectl debug:
	8. kubectl logs POD_NAME ( gives the logs of what is going on inside the pod).
	9. kubectl describe pod POD_NAME
	10.kubectl exec -it POD_NAME --bin/bash (This command gives the terminal of the POD_NAME container.)
		if --bin/bash doesn't work, try --bin/sh. One of them will work.
11. kubectl delete deployment DEPLOYMENT_NAME.

To apply a configuration to the pod(the container underneath), we use a configuration file.
12. kubectl apply -f FILE_NAME
	example: 
	kubectl apply -f config_file.yaml
	This kubectl apply command can be used to create, update components.
13. kubectl get pod -o wide (gives output in more wider form for pods)

14. kubectl get deployment nginx-depl -o yaml > nginx-depl-result.yaml
	This command says, get the output of 'nginx-depl' in yaml format and
	copy the output in nginx-depl-result.yaml file.

Now to delete a deployment by a file name use below command:
15. kubectl delete deployment -f nginx-depl.yaml

And to delete a service using a file name use below command:
16. kubectl delete service -f db-service.yaml

Base64 Encoding:
17. echo -n 'myNameIsJohnDcosta' | base64
	and the output will be a base64 encoding string value.
18. kubectl get secret
	it gives the list of created secrets. And these secrets can be 
	referenced inside deployment configuration file.
Q. So how to create a secret?
Ans. Just create a yaml file with secret informations and metadata and use 'apply'.
	kubectl apply -f my_secret_file.yaml
	The 'kind' in the secret yaml file is 'secret', it should be like this
		kind: secret


