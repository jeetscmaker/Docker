The Problem with Sensitive Information
========================================
Before digging into Vault, let's try to understand the problem it tries to solve: sensitive information management.

Most applications need access to sensitive data in order to work properly. For instance, an e-commerce application may have a username/password configured 
somewhere in order to connect to its database. It may also need API keys to integrate with other service providers, such as payment gateways, logistics, 
and other business partners.

Database credentials and API Keys are some examples of sensitive information that we need to store and make available to our applications in a secure way.

A simple solution is to store those credentials in a configuration file and read them at startup time. The problem with this approach is obvious, though. 
Whoever has access to this file share the same database privileges our application have – usually giving her full access to all stored data.

We can try to make things a bit harder by encrypting those files. This approach, however, will not add much in terms of overall security. Mainly, because 
our application must have access to the master key. Encryption, when used in this way, will only achieve a “false” sense of security.

Modern applications and cloud environments tend to add some extra complexity: distributed services, multiple databases, messaging systems and so on, all 
have sensitive information spread a bit everywhere, thus increasing the risk of a security breach.

So, what can we do? Let's Vault it!

What Is Vault?
==============
Hashicorp Vault addresses the problem of managing sensitive information – a secret in Vault's parlance. “Managing” in this context means that Vault controls 
all aspects of a sensitive piece of information: its generation, storage, usage and, last but not least, its revocation.

Hashicorp offers two versions of Vault. The open-source version, used in this article, is free to use, even in commercial environments. A paid version is 
also available, which includes technical support at different SLAs and additional features, such as HSM (Hardware Security Module) support.

Architecture & Key Features
=================================
Vault's architecture is deceivingly simple. Its main components are:

A persistence backend – storage for all secrets
An API server which handles client requests and performs operations on secrets
A number of secret engines, one for each type of supported secret type
By delegating all secret handling to Vault, we can mitigate some security issues:

Our applications don't have to store them anymore – just ask Vault when needed and discard it
We can use short-lived secrets, thus limiting the “window of opportunity” where an attacker can use a stolen secret
Vault encrypts all data with an encryption key before writing it to the store. This encryption key is encrypted by yet another key – the master key, used only at startup.

A key point in Vault's implementation is that it doesn't store the master key in the server. This means that not even Vault can access its saved data after startup. 
At this point, a Vault instance is said to be in a “sealed” state.

Later on, we'll go through the steps needed to generate the master key and unseal a Vault instance.

Once unsealed, Vault will be ready to accept API requests. Those requests, of course, need authentication, which brings us to how Vault authenticates 
clients and decides what they can or can't do.

Authentication
=================
To access secrets in Vault a client needs to authenticate itself using one of the supported methods. The simplest method uses Tokens, which are just strings 
sent on every API request using a special HTTP header.

When initially installed, Vault automatically generates a “root token”. This token is the equivalent as root superuser in Linux systems, so its use should 
be limited to a minimum. As a best practice, we should use this root token just to create other tokens with fewer privileges and then revoke it. This isn't 
a problem, though, since we can later generate another root token using unseal keys.

Vault also support other authentication mechanisms such as LDAP, JWT, TLS Certificates, among others. All those mechanisms build on top of the basic token 
mechanism: once Vault validates our client, it will provide a token that we can then use to access other APIs.

Tokens have a few properties associated with them. The main properties are:

A set of associated Policies (see next section)
Time-to-live
Whether it can be renewed
Maximum usage count
Unless told otherwise, tokens created by Vault will form a parent-child relationship. A child token can have at most the same level of privileges it parent has.

The opposite isn't true: we can – and usually do – create a child token with restrictive policies Another key point about this relationship: When we 
invalidate a token, all child tokens, and their descendants are also invalidated.

Policies
===============
Policies define exactly which secrets a client can access and which operations it can perform with them. Let's see how a simple policy looks like:

path "secret/accounting" {
    capabilities = [ "read" ]
}
Here we have used the HCL (Hashicorp's Configuration Language) syntax to define our policy. Vault also supports JSON for this purpose, 
but we'll stick to HCL in our examples since it is easier to read.

Policies in Vault are “deny by default”. A token attached to this sample policy will get access to secrets stored under secret/accounting 
and nothing else. At creation time a token can be attached to multiple policies. This is very useful because it allows us to create and 
test smaller policies and then apply them as required.

Another important aspect of policies is that they leverage lazy-evaluation. This means that we can update a given policy and all tokens 
will be affected immediately.

The policies described so far are also called Access Control List Policies, or ACL Policies. Vault also supports two additional policy types: 
EGP and RGP policies. Those are only available in the paid versions and extend the basic policy syntax with Sentinel support.

When available, this allows us to take into account in our policies additional attributes such as time of the day, multiple authentication 
factors, client network origin, and so on. For instance, we can define a policy that allows access to a given secret only on business hours.

